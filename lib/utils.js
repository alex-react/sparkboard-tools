// Generated by CoffeeScript 1.7.1
(function() {
  var _;

  _ = require("underscore");

  this.safeStringify = function(obj) {
    return JSON.stringify(obj).replace(/<\/script/g, '<\\/script').replace(/<!--/g, '<\\!--');
  };

  this.slugify = function(string) {
    string = string || "";
    string = string.toLowerCase();
    return string.replace(/[\s-]+/g, "-").replace(/[^\w-]*/g, "");
  };

  this.getRootComponent = function(component) {
    while (component._owner) {
      component = component._owner;
    }
    return component;
  };

  this.snapshotToArray = function(snapshot) {
    var elements;
    elements = [];
    snapshot.forEach(function(snap) {
      var element;
      element = snap.val();
      if (!_.isObject(element) || _.isArray(element)) {
        element = {
          val: element
        };
      }
      element.id = snap.name();
      elements.push(element);
      return false;
    });
    return elements;
  };

  this.closestData = function(el, dataAttr) {
    if (el.dataset && el.dataset.hasOwnProperty(dataAttr)) {
      return el;
    }
    while (el = el.parentNode) {
      if (el.dataset && el.dataset.hasOwnProperty(dataAttr)) {
        return el;
      }
    }
    return null;
  };

  this.closestClass = function(el, className) {
    if (el.className && el.className.indexOf(className) > -1) {
      return el;
    }
    while (el = el.parentNode) {
      if (el.className && el.className.indexOf(className) > -1) {
        return el;
      }
    }
    return null;
  };

  this.closestTag = function(el, tag) {
    tag = tag.toUpperCase();
    if (el.nodeName === tag) {
      return el;
    }
    while (el = el.parentNode) {
      if (el.nodeName === tag) {
        return el;
      }
    }
    return null;
  };

}).call(this);
